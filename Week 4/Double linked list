#include<stdio.h>
#include<stdlib.h>

struct node{
    float data;
    struct node*prev;
    struct node*next;
};

struct node*head = NULL, *tail= NULL, *cur, *temp, *temp1;

struct node*create(){
    int n;
    printf("Enter number of nodes: ");
    scanf("%d", &n);
    while(n--){
        cur= (struct nude*)malloc(sizeof(struct node));
        scanf("%f", &(cur-> data));
        cur-> prev = NULL;
        cur-> next = NULL;
        if(head == NULL){
            head = tail = cur;
        }
        else{
            tail-> next= cur;
            cur-> prev = tail;
            tail= cur;
        }
    }
    return head;
};

struct node*insert_begin(int ele){
    cur= (struct node*)malloc(sizeof(struct node));
    cur-> data = ele;
    cur-> prev = NULL;
    cur-> next = head;
    head-> prev = cur;
    head = cur;
    return head;
};

struct node*insert_end(int ele){
    cur= (struct node*)malloc(sizeof(struct node));
    cur-> data = ele;
    cur-> next = NULL;
    cur-> prev = tail;
    temp = head;
    while(temp-> next != NULL){
            temp= temp-> next;
    }
    temp-> next = cur;
    tail = cur;
    return head;
};

struct node*insert_pos(int pos, int ele){
    int c= 1;
    cur= (struct node*)malloc(sizeof(struct node));
    cur-> data = ele;
    temp= head;
    while(c < pos){
        temp1 = temp;
        temp= temp-> next;
        c++;
    }
    temp1-> next = cur;
    cur-> prev = temp1;
    cur-> next = temp;
    temp-> prev = cur;
    return head;
};

struct node*delete_begin(struct node*head){
    temp= head;
    head= head-> next;
    head-> prev= NULL;
    printf("Deleted element is %f\n", temp-> data);
    free(temp);
    return head;
};

struct node*delete_end(struct node*head){
    temp= head;
    while(temp-> next != NULL){
        temp1= temp;
        temp= temp-> next;
    }
    temp1-> next = NULL;
    printf("Deleted element is %f\n", temp-> data);
    free(temp);
    return head;
};

struct node*delete_pos(struct node*head, int pos){
    int c= 1;
    temp= head;
    while(c < pos){
        temp1= temp;
        temp= temp-> next;
        c++;
    }
    temp1-> next = temp-> next;
    temp-> next= temp1;
    printf("Deleted element is %f\n", temp-> data);
    free(temp);
    return head;
};

int display(struct node*head){
    temp= head;
    while(temp!= NULL){
        printf("%f-> ", temp -> data);
        temp = temp -> next;
    }
};

void reverse_display(struct node*tail){
    temp= tail;
    while(temp != NULL){
        printf("%f-> ", temp-> data);
        temp= temp-> prev;
    }
    return tail;
}

int main(){
    int ch, pos, ele, key;
    while(1){
        printf("\n1-create\n2-insert_begin\n3-insert_end\n4-insert_pos\n5-delete_begin\n6-delete_end\n7-delete_pos\n8- display\n9-reverse_display\n10-exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);
        switch(ch){
        case 1:
            head = create();
            break;
        case 2:
            scanf("%d", &ele);
            head= insert_begin(ele);
            break;
        case 3:
            scanf("%d", &ele);
            head= insert_end(ele);
            break;
        case 4:
            printf("Enter position: ");
            scanf("%d", &pos);
            printf("Enter element: ");
            scanf("%d", &ele);
            head= insert_pos(pos,ele);
            break;
        case 5:
            head= delete_begin(head);
            break;
        case 6:
            head = delete_end(head);
            break;
        case 7:
            printf("Enter position: ");
            scanf("%d", &pos);
            head= delete_pos(head,pos);
            break;
        case 8:
            display(head);
            break;
        case 9:
            reverse_display(tail);
            break;
        case 10:
            exit(0);
        }
    }
}

OUTPUT:

1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 1
Enter number of nodes: 5
10
20
30
40
50

1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 8
10.000000-> 20.000000-> 30.000000-> 40.000000-> 50.000000->
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 2
5

1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 8
5.000000-> 10.000000-> 20.000000-> 30.000000-> 40.000000-> 50.000000->
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 3
60

1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 8
5.000000-> 10.000000-> 20.000000-> 30.000000-> 40.000000-> 50.000000-> 60.000000->
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 4
Enter position: 4
Enter element: 25

1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 8
5.000000-> 10.000000-> 20.000000-> 25.000000-> 30.000000-> 40.000000-> 50.000000-> 60.000000->
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 5
Deleted element is 5.000000

1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 8
10.000000-> 20.000000-> 25.000000-> 30.000000-> 40.000000-> 50.000000-> 60.000000-> 
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 6
Deleted element is 60.000000

1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 8
10.000000-> 20.000000-> 25.000000-> 30.000000-> 40.000000-> 50.000000->
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 7
Enter position: 3
Deleted element is 25.000000

1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 8
10.000000-> 20.000000-> 30.000000-> 40.000000-> 50.000000->
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 9
60.000000-> 50.000000-> 40.000000-> 30.000000-> 25.000000-> 20.000000-> 10.000000-> 
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 10

Process returned 0 (0x0)   execution time : 116.826 s
Press any key to continue.
